plugins {
  id 'java'
  id 'jacoco'
  id 'org.springframework.boot'
  id 'io.spring.dependency-management'
  id 'org.springdoc.openapi-gradle-plugin'
}

group = 'com.camila.gateway'
version = '1.0.0'

dependencies {
  // Spring Boot
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  // Spring Cloud
  implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
  implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  implementation 'org.springframework.cloud:spring-cloud-starter-config'

  // Observability
  implementation 'io.micrometer:micrometer-tracing-bridge-otel'
  implementation 'io.micrometer:micrometer-registry-prometheus'
  implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'

  // API Documentation
  implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocOpenapiVersion}"

  // Utilities
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  // Testing
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

tasks.named('test') {
  useJUnitPlatform()
}

jacoco {
  toolVersion = '0.8.13'
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        '**/input/grpc/**',
        '**/input/rest/api/**',
        '**/input/rest/dto/**',
        '**/input/security/*Config**',
        '**/*MapperImpl**'
      ])
    }))
  }
}

openApi {
  apiDocsUrl = "http://localhost:8080/v3/api-docs"
  outputDir = file("$buildDir/docs")
  outputFileName = "openapi.json"
}
