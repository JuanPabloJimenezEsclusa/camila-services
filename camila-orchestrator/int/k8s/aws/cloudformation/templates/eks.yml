AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS EKS Cluster with EFS, ALB and Route 53 configuration'

Parameters:
  ClusterName:
    Type: String
    Default: camila-eks-cluster
  NodeGroupName:
    Type: String
    Default: camila-node-group
  DomainName:
    Type: String
    Default: poc.jpje-kops.xyz
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Default: Z102528520PCT47CK313B

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-VPC
        - Key: "ENTORN"
          Value: "INT"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-IGW
        - Key: "ENTORN"
          Value: "INT"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ '0', !GetAZs '' ]
      CidrBlock: 10.10.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-public-subnet1
        - Key: "ENTORN"
          Value: "INT"
          # Required to use ALB ingress controller
        - Key: "kubernetes.io/cluster/camila-eks-cluster"
          Value: "shared"
          # Required to use ALB ingress controller
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ '1', !GetAZs '' ]
      CidrBlock: 10.10.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-public-subnet2
        - Key: "ENTORN"
          Value: "INT"
          # Required to use ALB ingress controller
        - Key: "kubernetes.io/cluster/camila-eks-cluster"
          Value: "shared"
          # Required to use ALB ingress controller
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ '0', !GetAZs '' ]
      CidrBlock: 10.10.16.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-private-subnet1
        - Key: "ENTORN"
          Value: "INT"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ '1', !GetAZs '' ]
      CidrBlock: 10.10.32.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-private-subnet2
        - Key: "ENTORN"
          Value: "INT"

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-PublicRoutes
        - Key: "ENTORN"
          Value: "INT"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-PrivateRoutes1
        - Key: "ENTORN"
          Value: "INT"

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.32'
      RoleArn: !GetAtt EKSClusterRole.Arn
      UpgradePolicy:
        SupportType: STANDARD
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Tags:
        - Key: "ENTORN"
          Value: "INT"

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "camila-eks-cluster-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Tags:
        - Key: "ENTORN"
          Value: "INT"

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
          Description: "Allow http traffic to the EKS cluster"
        - IpProtocol: "tcp"
          FromPort: 7000
          ToPort: 7000
          CidrIp: "0.0.0.0/0"
          Description: "Allow rsocket traffic from the EKS balancer"
        - IpProtocol: "tcp"
          FromPort: 6565
          ToPort: 6565
          CidrIp: "0.0.0.0/0"
          Description: "Allow grpc traffic from the EKS balancer"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic"
      Tags:
        - Key: "Name"
          Value: "camila-eks-cluster-sg"
        - Key: "ENTORN"
          Value: "INT"

  # https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html
  VPCCNIAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      AddonVersion: v1.19.5-eksbuild.1
      ClusterName: !Ref EKSCluster
      ResolveConflicts: OVERWRITE

  # https://docs.aws.amazon.com/eks/latest/userguide/managing-coredns.html
  CoreDNSAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: coredns
      AddonVersion: v1.11.4-eksbuild.14
      ClusterName: !Ref EKSCluster
      ResolveConflicts: OVERWRITE

  # https://docs.aws.amazon.com/eks/latest/userguide/managing-kube-proxy.html
  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: kube-proxy
      AddonVersion: v1.32.3-eksbuild.7
      ClusterName: !Ref EKSCluster
      ResolveConflicts: OVERWRITE

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      CapacityType: SPOT
      DiskSize:  20
      InstanceTypes:
        - t2.medium
        - t3.medium
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 2
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Labels:
        role: nodes
        entorn: INT
      Tags:
        ENTORN: INT

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "camila--eks-node-group-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: "ENTORN"
          Value: "INT"

  FargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: !Sub "${ClusterName}-fargate-profile"
      PodExecutionRoleArn: !GetAtt FargatePodExecutionRole.Arn
      Selectors:
        - Namespace: fargate-namespace
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: "ENTORN"
          Value: "INT"

  FargatePodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "camila-eks-fargate-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Tags:
        - Key: "ENTORN"
          Value: "INT"

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      CertificateTransparencyLoggingPreference: DISABLED
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: "ENTORN"
          Value: "INT"

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-public-subnet1"
  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-public-subnet2"
  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-private-subnet1"
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-private-subnet2"
  ClusterName:
    Description: EKS Cluster Name
    Value: !Ref EKSCluster
  OpenIdConnectIssuerUrl:
    Description: EKS Cluster OpenIdConnectIssuerUrl
    Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
  CertificateArn:
    Description: EKS Cluster ARN Certificate
    Value: !Ref Certificate
  NodeGroupName:
    Description: EKS NodeGroup Name
    Value: !Ref NodeGroupName
    Export:
      Name: !Sub "${AWS::StackName}-NodeGroupName"
  FargateProfileName:
    Description: EKS Fargate Profile Name
    Value: !Ref FargateProfile
    Export:
      Name: !Sub "${AWS::StackName}-FargateProfileName"
