AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to Camila Services
# https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-cloudformation
# https://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html

Parameters:
  HostedZoneId:
    Type: String
    Description: The ID of the Route 53 hosted zone
    Default: Z102528520PCT47CK313B
  DomainName:
    Type: String
    Description: The domain name for the Route 53 record set
    Default: poc.jpje-kops.xyz
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
  ImageName:
    Type: String
    Description: The name of the Docker image
    Default: "546053716955.dkr.ecr.eu-west-1.amazonaws.com/camila-product-api:1.0.0"
  RepositoryTechnology:
    Type: String
    Description: The repository technology
    Default: "mongo"
  CouchbaseConnection:
    Type: String
    Description: The Couchbase connection string
    NoEcho: true
  CouchbaseUsername:
    Type: String
    Description: The Couchbase username
    NoEcho: true

Resources:

  # Create a VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.10.0.0/16" # /16 maximum /28 minimum
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "camila-product-vpc"
        - Key: "ENTORN"
          Value: "PRE"

  # Create Subnets in different Availability Zones
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Description:  "Public Subnet A"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: "Name"
          Value: "camila-product-public-subnet-a"
        - Key: "ENTORN"
          Value: "PRE"

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Description:  "Public Subnet B"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: "Name"
          Value: "camila-product-public-subnet-b"
        - Key: "ENTORN"
          Value: "PRE"

  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Description:  "Private Subnet A"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.16.0/20"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: "Name"
          Value: "camila-product-private-subnet-a"
        - Key: "ENTORN"
          Value: "PRE"

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Description:  "Private Subnet B"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.32.0/20"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: "Name"
          Value: "camila-product-private-subnet-b"
        - Key: "ENTORN"
          Value: "PRE"

  # Create an Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "camila-product-igw"
        - Key: "ENTORN"
          Value: "PRE"

  # Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create Route Tables
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "camila-product-public-route-table"
        - Key: "ENTORN"
          Value: "PRE"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "camila-product-private-route-table"
        - Key: "ENTORN"
          Value: "PRE"

  # Create Routes to the Internet Gateway
  PublicRoute:
    Type: "AWS::EC2::Route"
    Description: "Public Route to Internet Gateway"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Description: "Private Route to Internet Gateway"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Associate the Subnets with the Route Tables
  PublicSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Description: "Associate Public Subnet A with Public Route Table"
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Description: "Associate Public Subnet B with Public Route Table"
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Description: "Associate Private Subnet A with Private Route Table"
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Description: "Associate Private Subnet B with Private Route Table"
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # Create deny NACL rules
  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "camila-product-network-acl"
        - Key: "ENTORN"
          Value: "PRE"

  # Deny all inbound traffic to the NACL
  SSHDenyInboundNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: deny
      Egress: false # Inbound rule
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  # Deny all outbound traffic to the NACL
  SSHDenyOutboundNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 200
      Protocol: 6 # TCP
      RuleAction: deny
      Egress: true # Outbound rule
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  # Allow all other inbound traffic
  AllowAllInboundNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 300
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: false # Inbound rule
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  # Allow all other outbound traffic
  AllowAllOutboundNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 400
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: true # Outbound rule
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  # Associate the NACL with the private subnets
  PrivateSubnetANACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref NetworkACL

  PrivateSubnetBNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref NetworkACL

  # Add Flow logs
  VPCLogGroup:
    Type: "AWS::Logs::LogGroup"
    Description: "VPC Flow Logs Group"
    Properties:
      LogGroupName: !Sub '/vpc/${AWS::StackName}'
      RetentionInDays: 1
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogDestination: !GetAtt VPCLogGroup.Arn
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref VPCFlowLogPolicy

  VPCFlowLogPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/vpc/${AWS::StackName}:*'

  # Create an ECS Cluster
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Description: "ECS Cluster"
    Properties:
      ClusterName: "camila-product-cluster"
      CapacityProviders: ["FARGATE", "FARGATE_SPOT"]
      ClusterSettings:
        - Name: "containerInsights"
          Value: "enabled"
      DefaultCapacityProviderStrategy:
        - CapacityProvider: "FARGATE_SPOT"
          Weight: 1
          Base: 0
      Configuration:
        ExecuteCommandConfiguration:
          Logging: "DEFAULT"
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Create a CloudWatch Logs group
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Description: "CloudWatch Logs group"
    Properties:
      LogGroupName: "/ecs/camila-product-backend"
      RetentionInDays: 1
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Create a Task Definition
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Description: "Task Definition"
    DeletionPolicy: Delete
    Properties:
      Family: "camila-product-definition"
      NetworkMode: "awsvpc"
      RequiresCompatibilities: ["FARGATE"]
      Cpu: "512"
      Memory: "1024"
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      Tags:
        - Key: "ENTORN"
          Value: "PRE"
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html
      ContainerDefinitions:
        - Name: "camila-product-backend"
          Image: !Ref ImageName
          Cpu: "512"
          Memory: "1024"
          PortMappings:
            - Name: "http-8080"
              ContainerPort: 8080
              HostPort: 8080
              Protocol: "tcp"
              AppProtocol: "http"
            - Name: "rsocket-7000"
              ContainerPort: 7000
              HostPort: 7000
              Protocol: "tcp"
              AppProtocol: "http"
            - Name: "grpc-6565"
              ContainerPort: 6565
              HostPort: 6565
              Protocol: "tcp"
              AppProtocol: "grpc"
          Essential: true
          LinuxParameters:
            # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html#ecs-exec-enabling-and-using
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"
          Secrets:
            - Name: spring.couchbase.password
              ValueFrom: !Join
                - ":"
                - - !ImportValue CouchbasePasswordSecretARN
                  - "password::"
            - Name: spring.data.mongodb.uri
              ValueFrom: !Join
                - ":"
                - - !ImportValue MongoUriSecretARN
                  - "uri::"
          Environment:
            - Name: LANGUAGE
              Value: "en_US.utf8"
            - Name: LANG
              Value: "en_US.utf8"
            - Name: LC_ALL
              Value: "en_US.utf8"
            - Name: TIME_ZONE
              Value: "UTC"
            - Name: JVM_OPTIONS
              Value: "-Xms512m -Xmx1024m"
            - Name: SPRING_PROFILES_ACTIVE
              Value: "pre"
            - Name: SERVER_URL
              Value: "https://poc.jpje-kops.xyz"
            - Name: SECURITY_ISSUER_URI
              Value: !Join
                - "/"
                - - "https://cognito-idp.eu-west-1.amazonaws.com"
                  - !ImportValue UserPoolARN # ID -> AWS::Cognito::UserPool
            - Name: SECURITY_DOMAIN_URI
              Value: "https://camila-realm.auth.eu-west-1.amazoncognito.com" # Domain -> AWS::Cognito::UserPoolDomain
            - Name: spring.application.repository.technology
              Value: !Ref RepositoryTechnology
            - Name: spring.couchbase.connection-string
              Value: !Ref CouchbaseConnection
            - Name: spring.couchbase.username
              Value: !Ref CouchbaseUsername
            - Name: spring.couchbase.env.ssl.enabled
              Value: "true"
            - Name: spring.data.mongodb.ssl.enabled
              Value: "true"
            - Name: spring.rsocket.server.port
              Value: "7000"
            - Name: grpc.server.port
              Value: "6565"

  # Create an ECS Service
  # https://aws.amazon.com/es/fargate/pricing/
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
  ECSService:
    Type: "AWS::ECS::Service"
    Description: "ECS Service"
    DependsOn:
      - ListenerHTTP
      - ListenerRSocket
      - ListenerGrpc
    Properties:
      ServiceName: "camila-product-service"
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: "FARGATE"
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 30
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          # Although the service is on a private subnet, the public IP is necessary to have visibility of the image repository.
          # Otherwise, a NAT Gateway or a VPC Peering Endpoint would be needed, which have a higher cost.
          AssignPublicIp: "ENABLED"
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
            - !Ref AdminSecurityGroup
      LoadBalancers:
        - ContainerName: "camila-product-backend"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
        - ContainerName: "camila-product-backend"
          ContainerPort: 7000
          TargetGroupArn: !Ref RSocketTargetGroup
        - ContainerName: "camila-product-backend"
          ContainerPort: 6565
          TargetGroupArn: !Ref GrpcTargetGroup
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Create a Security Group for the Load Balancer
  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Description: "Security group for the load balancer"
    Properties:
      GroupDescription: "Security group for the load balancer"
      VpcId: !Ref VPC
      GroupName: "camila-product-lb-sg"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
          Description: "Allow 80 HTTP traffic"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
          Description: "Allow 443 HTTPS traffic"
        - IpProtocol: "tcp"
          FromPort: 7001
          ToPort: 7001
          CidrIp: "0.0.0.0/0"
          Description: "Allow 7001 Rsocket traffic"
        - IpProtocol: "tcp"
          FromPort: 50051
          ToPort: 50051
          CidrIp: "0.0.0.0/0"
          Description: "Allow 50051 Grpc traffic"
      Tags:
        - Key: "Name"
          Value: "camila-product-lb-sg"
        - Key: "ENTORN"
          Value: "PRE"

  # Security Group for ECS Tasks
  ECSServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Description: "Security group for the ECS tasks"
    Properties:
      GroupDescription: "Allow traffic to ECS tasks"
      VpcId: !Ref VPC
      GroupName: "camila-product-ecs-sg"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: "Allow http traffic from the load balancer"
        - IpProtocol: "tcp"
          FromPort: 7000
          ToPort: 7000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: "Allow rsocket traffic from the load balancer"
        - IpProtocol: "tcp"
          FromPort: 6565
          ToPort: 6565
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: "Allow grpc traffic from the load balancer"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic"
      Tags:
        - Key: "Name"
          Value: "camila-product-ecs-sg"
        - Key: "ENTORN"
          Value: "PRE"

  # Security Group for Admin Tasks
  AdminSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Description: "Security group for the Admin tasks"
    Properties:
      GroupDescription: "Allow traffic to Admin tasks"
      VpcId: !Ref VPC
      GroupName: "camila-product-admin-sg"
      SecurityGroupIngress:
        - IpProtocol: "icmp"
          FromPort: 8
          ToPort: -1
          CidrIp: "0.0.0.0/32"
          Description: "Allow ping traffic"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic"
      Tags:
        - Key: "Name"
          Value: "camila-product-admin-sg"
        - Key: "ENTORN"
          Value: "PRE"

  # Create an Application Load Balancer
  # https://aws.amazon.com/es/elasticloadbalancing/pricing/
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Description: "Application Load Balancer"
    Properties:
      Name: "camila-product-lb"
      Type: "application"
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: "false"
          # If true, deletion protection is enabled. Default is false.
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "true"
          # If true, the HTTP listener will reject requests with invalid headers.
          # The default is false, which sends a 400 response to the client.
        - Key: "routing.http2.enabled"
          Value: "true"
          # If true, the load balancer supports HTTP/2.
        - Key: "idle_timeout.timeout_seconds"
          Value: "120"
          # The number of seconds before the connection is considered idle.
      IpAddressType: "ipv4"
      Tags:
        - Key: "Name"
          Value: "camila-product-lb"
        - Key: "ENTORN"
          Value: "PRE"

  # Create a Target Group for the Load Balancer
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Description: "Target Group for the Load Balancer"
    Properties:
      Name: "camila-product-target-group"
      VpcId: !Ref VPC
      Protocol: "HTTP"
      Port: 8080
      HealthCheckEnabled: true
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "8080"
      HealthCheckPath: "/product/api/actuator/health/ping"
      HealthCheckTimeoutSeconds: 30
      HealthCheckIntervalSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: load_balancing.algorithm.type
          Value: "round_robin"
          # The load balancing algorithm to use. Required if load_balancing.algorithm.preserve_host_header is set.
        - Key: stickiness.enabled
          Value: "true"
          # If true, the load balancer will send the same session cookie to the client if it fails to establish a connection with a target.
        - Key: stickiness.type
          Value: "lb_cookie"
          # The type of stickiness to use. Required if stickiness.enabled is set.
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Create a Target Group for RSocket traffic
  RSocketTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Description: "Target Group for RSocket traffic"
    Properties:
      Name: "camila-product-rsocket"
      VpcId: !Ref VPC
      Protocol: "HTTP"
      Port: 7000
      HealthCheckEnabled: true
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "8080"
      HealthCheckPath: "/product/api/actuator/health/ping"
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 300
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Create a Target Group for GRPC traffic
  GrpcTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Description: "Target Group for GRPC traffic"
    Properties:
      Name: "camila-product-grpc"
      VpcId: !Ref VPC
      Protocol: "HTTP"
      ProtocolVersion: "GRPC" # This is a key to make it work!
      Port: 6565
      HealthCheckEnabled: true
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "6565"
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 300
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        GrpcCode: "0-20"
      TargetType: "ip"
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Request a certificate from ACM
  # https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html
  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Description: "Certificate for the Load Balancer"
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      CertificateTransparencyLoggingPreference: DISABLED
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Create a Listener for the Load Balancer
  ListenerHTTP:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Description: "Listener for the Load Balancer"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerHTTPS:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Description: "Listener for the Load Balancer"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  # Create a Listener for the Load Balancer (RSocket)
  ListenerRSocket:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Description: "Listener for the Load Balancer (RSocket)"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref RSocketTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 7001
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  # Create a Listener for the Load Balancer (Grpc)
  ListenerGrpc:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Description: "Listener for the Load Balancer (Grpc)"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref GrpcTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 50051
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  # Create an IAM Role for ECS Task Execution
  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Description: "IAM Role for ECS Task Execution"
    Properties:
      RoleName: "camila-product-task-execution-role"
      Description: "IAM Role for ECS Task Execution"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ecsTaskExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:ExecuteCommand"
                  - "ecs:DescribeTasks"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "cloudwatch:PutMetricData"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Scale the ECS Service
  ScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Description: "Scale the ECS Service"
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join
        - "/"
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Create an IAM Role for Auto Scaling
  AutoScalingRole:
    Type: "AWS::IAM::Role"
    Description: "IAM Role for Auto Scaling"
    Properties:
      RoleName: "camila-product-auto-scaling-role"
      Description: "IAM Role for Auto Scaling"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "application-autoscaling.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: camila-product-scaling-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:PutMetricData"
                  - "ecs:CreateService"
                  - "ecs:UpdateService"
                  - "ecs:DescribeServices"
                  - "ecs:DescribeClusters"
                Resource: "*"
      Tags:
        - Key: "ENTORN"
          Value: "PRE"

  # Alarms for the Scaling Policy
  ScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Description: "Scale Out Policy"
    Properties:
      PolicyName: camila-product-scale-out-policy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        # it is necessary to comment the  MetricAggregationType  to  avoid  an  error
        #MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0.0
            ScalingAdjustment: 1
        Cooldown: 180

  ScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Description: "Scale In Policy"
    Properties:
      PolicyName: camila-product-scale-in-policy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        # it is necessary to comment the  MetricAggregationType  to  avoid  an  error
        #MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0.0
            ScalingAdjustment: -1
        Cooldown: 180

  # CloudWatch Alarm for CPU Utilization
  CPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Description: "High CloudWatch Alarm for CPU Utilization"
    Properties:
      AlarmName: camila-product-cpu-alarm-high
      AlarmDescription: "Alarm if CPU exceeds 50%"
      Namespace: "AWS/ECS"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "ClusterName"
          Value: !Ref ECSCluster
        - Name: "ServiceName"
          Value: !GetAtt ECSService.Name
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      TreatMissingData: notBreaching
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOutPolicy

  CPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Description: "Low CloudWatch Alarm for CPU Utilization"
    Properties:
      AlarmName: camila-product-cpu-alarm-low
      AlarmDescription: "Alarm if CPU is below 10%"
      Namespace: "AWS/ECS"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "ClusterName"
          Value: !Ref ECSCluster
        - Name: "ServiceName"
          Value: !GetAtt ECSService.Name
      Statistic: "Average"
      Period: 180
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: "LessThanOrEqualToThreshold"
      TreatMissingData: notBreaching
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleInPolicy

  # CloudWatch Alarm for load balancer count
  LoadBalancerRequestCountAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: camila-product-elb-request-count-alarm
      AlarmDescription: "Alarm when request count exceeds 0"
      Namespace: "AWS/ApplicationELB"
      MetricName: "RequestCount"
      Dimensions:
        - Name: "LoadBalancer"
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      Statistic: "Sum"
      Period: 30
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      TreatMissingData: notBreaching
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOutPolicy

  # Create a Route 53 Alias Record to the Load Balancer
  RecordSet:
    Type: "AWS::Route53::RecordSet"
    Description: "Route 53 Alias Record to the Load Balancer"
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

Outputs:
  VPCId:
    Description: The ID of the VPC where the resources are deployed
    Value: !Ref VPC
  PublicSubnetAId:
    Description: The ID of the public subnet A where the resources are deployed
    Value: !Ref PublicSubnetA
  PublicSubnetBId:
    Description: The ID of the public subnet B where the resources are deployed
    Value: !Ref PublicSubnetB
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
  ECSServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService
  LoadBalancerDNSName:
    Description: The DNS name of the Elastic Load Balancing load balancer
    Value: !GetAtt LoadBalancer.DNSName
  RecordSetName:
    Description: The domain name or subdomain that the Route 53 Alias Record points to
    Value: !Ref DomainName
  ScaleOutPolicyArn:
    Description: The ARN of the Scale Out Policy
    Value: !Ref ScaleOutPolicy
  ScaleInPolicyArn:
    Description: The ARN of the Scale In Policy
    Value: !Ref ScaleInPolicy
  HighCPUAlarmName:
    Description: The name of the high CPU alarm
    Value: !Ref CPUAlarmHigh
  LowCPUAlarmName:
    Description: The name of the low CPU alarm
    Value: !Ref CPUAlarmLow
  LogGroupName:
    Description: The name of the CloudWatch Logs log group
    Value: !Ref LogGroup
