###### Default properties ######
spring:
  application:
    name: "@project.name@"
  banner:
    # https://www.ascii-art-generator.org/
    location: classpath:/api-banner.txt
  cloud:
    refresh:
      # https://github.com/spring-cloud/spring-cloud-release/wiki/AOT-transformations-and-native-image-support#refresh-scope
      enabled: false
  data:
    mongodb:
      # https://www.mongodb.com/docs/manual/tutorial/connection-pool-performance-tuning/
      uri: "mongodb://camilauser:camilauser@localhost:27017/camila-db?maxPoolSize=200&connectTimeoutMS=60000&socketTimeoutMS=120000"
      authentication-database: camila-db
      ssl:
        enabled: false
      auto-index-creation: true
      uuid-representation: JAVA_LEGACY
    couchbase:
      bucket-name: camila-product-bucket
      scope-name: product
  couchbase:
    connection-string: couchbase://localhost:11207
    username: Administrator
    password: password
    env:
      ssl:
        enabled: false
  main:
    web-application-type: reactive
  webflux:
    base-path: /product-dev/api
  graphql:
    graphiql:
      enabled: true
      path: /graphiql
  rsocket:
    server:
      mapping-path: /product-dev/api/rsocket
      transport: websocket
  docker:
    compose:
      enabled: false

info:
  app:
    name: "@project.name@"
    version: "@project.version@"

springdoc:
  enable-spring-security: false
  swagger-ui:
    filter: true
    show-extensions: true
    show-common-extensions: true
    doc-expansion: none
    operations-sorter: method
    persist-authorization: true
    deep-linking: true
    display-request-duration: true
    display-operation-id: true
    defaultModelsExpandDepth: 1
    tagsSorter: alpha
  show-actuator: true
  api-docs:
    enabled: true
    groups:
      enabled: true
    resolve-schema-properties: true
  show-login-endpoint: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    env:
      show-values: ALWAYS
      cache:
        time-to-live: 60s
      access: unrestricted
    info:
      cache:
        time-to-live: 3600s
      access: unrestricted
    beans:
      cache:
        time-to-live: 10s
      access: unrestricted
    health:
      show-details: ALWAYS
      show-components: ALWAYS
      access: unrestricted
    configprops:
      show-values: ALWAYS
      access: unrestricted
    shutdown:
      access: unrestricted
    prometheus:
      access: unrestricted
  info:
    env:
      enabled: true
    git:
      enabled: true
      mode: full
    os:
      enabled: true
    process:
      enabled: true
    build:
      enabled: true
    java:
      enabled: true
  tracing:
    enabled: false

logging:
  charset:
    file: UTF-8
    console: UTF-8
  config: classpath:logback.xml

de:
  flapdoodle:
    mongodb:
      embedded:
        version: 8.0.5

server:
  port: ${PORT:8080}
  shutdown: immediate

grpc:
  # this client only is util to testing
  client:
    product-service:
      address: static://localhost:6565
    GLOBAL:
      negotiation-type: plaintext
  server:
    port: 0 # by default random port
    shutdown-grace-period: 0
    health-service-enabled: true
    reflection-service-enabled: true

repository:
  technology: ${REPOSITORY_TECHNOLOGY:mongo}

---
###### Local|Dev properties ######
spring:
  config:
    activate:
      on-profile: "loc|dev"
  jmx:
    enabled: false
  rsocket:
    server:
      port: 7000

grpc:
  server:
    port: 6565

management:
  endpoint:
    chaosmonkey:
      access: unrestricted
    chaosmonkeyjmx:
      access: unrestricted

# https://github.com/codecentric/chaos-monkey-spring-boot/tree/main/chaos-monkey-docs/src/main/asciidoc
chaos:
  monkey:
    enabled: true
    watcher:
      rest-controller: true
      service: true
      repository: true
      component: false
      actuator-health: true
      controller: false
      rest-template: false
      web-client: false
    assaults:
      level: 10
      latency-active: true
      exceptions-active: true
      kill-application-active: true
      memory-active: true
      cpu-active: true

debug: false
logging:
  level:
    root: WARN
    org.hibernate.validator: ERROR
    com.netflix.discovery: ERROR
    org.springframework.boot: ERROR
    org.springframework: ERROR
    org.springframework.data: ERROR
    org.springframework.security: ERROR
    org.springframework.security.oauth2: ERROR
    org.springframework.web.reactive.socket: ERROR
    org.springframework.context: ERROR
    org.mongodb: ERROR
    com.mongodb: ERROR
    com.couchbase: ERROR
    net.devh.boot.grpc.server: ERROR
    io.grpc.netty: ERROR

---
###### Disable config|discovery feature by default ######
spring:
  config:
    activate:
      on-profile: "!dev"
  cloud:
    config:
      enabled: false
    discovery:
      enabled: false
  security:
    user:
      name: camila
      password: camila

---
###### Enable config|discovery feature on remote deploy ######
spring:
  config:
    activate:
      on-profile: "dev"
    import: "optional:configserver:${CONFIG_SERVER_URI:}"
  cloud:
    discovery:
      enabled: true
    config:
      enabled: true
      retry:
        max-attempts: 10
        max-interval: 10000
        initial-interval: 1000
        multiplier: 1.1
      discovery:
        enabled: true
        service-id: "camila-config"
      label: main
      profile: ${SPRING_PROFILES_ACTIVE:dev}
      name: ${spring.application.name}
      allow-override: true
  # Enable keycloak security
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: "${KEYCLOAK_URL:http://localhost:9191}/realms/${KEYCLOAK_REALM:camila-realm}"

springdoc:
  enable-spring-security: true
  show-oauth2-endpoints: true

# Enable keycloak security
openapi:
  oAuthFlow:
    url: "${GATEWAY_SERVER_URL:http://localhost}:${server.port:8080}"
    tokenUrl: "${KEYCLOAK_URL:http://localhost:9191}/realms/${KEYCLOAK_REALM:camila-realm}/protocol/openid-connect/token"
    authorizationUrl: "${KEYCLOAK_URL:http://localhost:9191}/realms/${KEYCLOAK_REALM:camila-realm}/protocol/openid-connect/auth"
    refreshUrl: "${KEYCLOAK_URL:http://localhost:9191}/realms/${KEYCLOAK_REALM:camila-realm}/protocol/openid-connect/token"

# Enable Eureka client
eureka:
  client:
    enabled: true
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
    healthcheck:
      enabled: true
  instance:
    preferIpAddress: true
    instance-id: ${HOSTNAME}:${spring.application.name}:${server.port}:${random.int(0,9)}
    statusPageUrlPath: ${spring.webflux.base-path}/actuator/info
    healthCheckUrlPath: ${spring.webflux.base-path}/actuator/health
    async-client-initialization: true
    nonSecurePortEnabled: true
    non-secure-port: ${server.port}
    metadata-map:
      weight:  ${random.int(1,10)}
      startup: ${random.int}
      # https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/1.3.6.RELEASE/multi/multi__service_discovery_eureka_clients.html#_status_page_and_health_indicator
      management.context-path: ${spring.webflux.base-path}/actuator
    leaseExpirationDurationInSeconds: 30
    leaseRenewalIntervalInSeconds: 15

# Enable all management endpoints
management:
  tracing:
    enabled: true
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_TRACING_ENDPOINT:http://localhost:9411/api/v2/spans}
      connect-timeout: 10s
      read-timeout: 30s

---
###### Integration properties ######
spring:
  config:
    activate:
      on-profile: "int"
  webflux:
    base-path: /product-int/api
  data:
    mongodb:
      uri: "mongodb://camilauser:camilauser@mongo-nodeport-svc.mongodb.svc.cluster.local:27017/camila-db?maxPoolSize=200&connectTimeoutMS=5000&socketTimeoutMS=120000"
      authentication-database: camila-db

# Disable all management endpoints
management:
  tracing:
    enabled: false

---
###### Production properties ######

# Spring base properties
spring:
  main:
    log-startup-info: true
  config:
    activate:
      on-profile: "pre|pro"
  webflux:
    base-path: /product/api
  devtools:
    add-properties: false
    livereload:
      enabled: false
  rsocket:
    server:
      mapping-path: /product/api/rsocket
      port: 7000

  # Enable AWS Cognito Oauth2 security
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: "${SECURITY_ISSUER_URI}"

# Set GRPC port
grpc:
  server:
    port: 6565

# Disable all management endpoints
management:
  tracing:
    enabled: false

# Turn off global forward headers
server:
  forward-headers-strategy: framework

# Turn off global debug
debug: false

# Enable OpenApi
openapi:
  oAuthFlow:
    url: "${SERVER_URL:http://localhost:8080}"
    tokenUrl: "${SECURITY_DOMAIN_URI}/oauth2/token"
    authorizationUrl: "${SECURITY_DOMAIN_URI}/oauth2/authorize"
    refreshUrl: "${SECURITY_DOMAIN_URI}/oauth2/token"

# Enable logging for all levels
logging:
  level:
    reactor: ERROR
    org.hibernate.validator: ERROR
    org.springframework: ERROR
    org.springframework.web: ERROR
    org.springframework.data: DEBUG
    org.springframework.context: ERROR
    com.couchbase: ERROR
    org.springframework.boot: ERROR
    org.springframework.boot.web.embedded.netty: INFO
    net.devh.boot.grpc.server: ERROR
    io.grpc.netty: ERROR

---
###### Local docker compose properties ######

spring:
  config:
    activate:
      on-profile: "local-compose"
  jmx:
    enabled: true
  rsocket:
    server:
      port: 7000
  # https://docs.spring.io/spring-boot/reference/features/dev-services.html#features.dev-services.docker-compose
  docker:
    compose:
      enabled: true
      skip:
        in-tests: true
      start:
        command: up
        skip: if_running
        log-level: debug
      stop:
        command: down
        timeout: 15s
      readiness:
        timeout: 2m
        wait: only_if_started
      profiles:
        active: "docker-compose"
      file: "${user.dir}/../camila-orchestrator/dev/compose/docker-compose-spring-boot.yml"
      lifecycle-management: start_and_stop
  data:
    mongodb:
      uri: "mongodb://camilauser:camilauser@mongodb:27017/camila-db?maxPoolSize=200&connectTimeoutMS=60000&socketTimeoutMS=120000"
  couchbase:
    connection-string: couchbase://couchbase
    username: Administrator
    password: password

grpc:
  server:
    port: 6565

debug: false
logging:
  level:
    root: WARN
    org.hibernate.validator: ERROR
    com.netflix.discovery: ERROR
    org.springframework.boot: ERROR
    org.springframework.data: ERROR
    org.springframework.security: ERROR
    org.springframework.dao: ERROR
    org.springframework.web: ERROR
    org.springframework.context: ERROR
    org.springframework.cache: DEBUG
    org.mongodb: ERROR
    com.mongodb: ERROR
    com.couchbase: ERROR
    net.devh.boot.grpc.server: INFO
    io.grpc.netty: ERROR
    io.netty: INFO
